plugins {
	id 'java' // Needed for assemble and build
	id 'maven-publish' // Provides publishing and publishToMavenLocal
	id 'com.enonic.defaults' version '2.1.5' // Publishing
	id 'com.enonic.xp.app' version '3.6.2'
	id 'com.github.node-gradle.node' version '7.1.0'
}

// XP 7.12 and below requires Java 11
// compileJava {
// 	options.release = 17
// }

repositories {
	mavenLocal()
	xp.enonicRepo('dev')
	mavenCentral()
}


app {
	name = project.appName
	group = 'com.enonic.app'
	displayName = 'Explorer'
	vendorName = 'Enonic AS'
	vendorUrl = 'http://enonic.com'
	systemVersion = "${xpVersion}"
}


dependencies {
	implementation "com.enonic.xp:core-api:${xpVersion}"
	implementation "com.enonic.xp:portal-api:${xpVersion}"

	//──────────────────────────────────────────────────────────────────────────
	// Core libs (com.enonic.xp)
	//──────────────────────────────────────────────────────────────────────────

	include "com.enonic.xp:lib-admin:${xpVersion}"
	include "com.enonic.xp:lib-auth:${xpVersion}"
	include "com.enonic.xp:lib-cluster:${xpVersion}" // src/main/resources/main.ts:import {isMaster} from '/lib/xp/cluster';
	include "com.enonic.xp:lib-common:${xpVersion}"
	include "com.enonic.xp:lib-context:${xpVersion}" // Needed by lib-explorer
	include "com.enonic.xp:lib-event:${xpVersion}"
	include "com.enonic.xp:lib-i18n:${xpVersion}" // Needed by lib-explorer
	include "com.enonic.xp:lib-io:${xpVersion}"
	include "com.enonic.xp:lib-mail:${xpVersion}" // Needed by lib-explorer
	include "com.enonic.xp:lib-node:${xpVersion}" // Needed by lib-explorer
	include "com.enonic.xp:lib-portal:${xpVersion}"
	include "com.enonic.xp:lib-repo:${xpVersion}"
	include "com.enonic.xp:lib-scheduler:${xpVersion}"
	include "com.enonic.xp:lib-task:${xpVersion}"
	//include "com.enonic.xp:lib-thymeleaf:${xpVersion}"
	include "com.enonic.xp:lib-vhost:${xpVersion}"
	include "com.enonic.xp:lib-websocket:${xpVersion}"

	//──────────────────────────────────────────────────────────────────────────
	// Other enonic libs (com.enonic.lib)
	//──────────────────────────────────────────────────────────────────────────

	//include 'com.enonic.lib:lib-admin-ui:3.0.0' // Not needed for the XP Menu

	include 'com.enonic.lib:lib-cache:2.2.1'
	include 'com.enonic.lib:lib-graphql:2.1.0'
	//include 'com.enonic.lib:lib-graphql-playground:0.0.1'
	include 'com.enonic.lib:lib-guillotine:6.2.1'
	include 'com.enonic.lib:lib-http-client:3.2.2'
	include 'com.enonic.lib:lib-license:3.1.0'
	include 'com.enonic.lib:lib-router:3.2.0'
	// include 'com.enonic.lib:lib-asset:1.0.0'
	include 'com.enonic.lib:lib-static:2.1.0'
	include 'com.enonic.lib:lib-explorer:4.4.5'
	include 'com.enonic.lib:lib-util:3.1.1'
	include 'com.enonic.lib:lib-galimatias:1.0.0-B1'

	// WARNING: Do NOT use include files, jar file will be missing dependencies!
}


tasks.withType(Copy) {
  includeEmptyDirs = false
}

wrapper {
	distributionUrl = "${gradleDistributionUrl}"
}

node {
	download = true
	version = "${nodeVersion}"
}

sourceSets {
	main {
		resources { // Paths relative to src/main/resources
			exclude 'assets/**/*.svg'
		}
	}
}

npmInstall.args = ['--legacy-peer-deps']

tasks.register('npmCheck', NpmTask) {
	dependsOn npmInstall
	args = ['verify:types']
	environment = [
		'FORCE_COLOR': 'true',
	]
}
// Too many errors, so we skip this for now
// check.dependsOn npmCheck

tasks.register('npmTest', NpmTask) {
	dependsOn npmInstall
	args = ['test']
	environment = [
		'FORCE_COLOR': 'true',
	]
	inputs.dir 'src/main/resources'
	inputs.dir 'test'
	outputs.dir 'coverage'
}
// The lib-explorer files are not available on github, so tests can't run there yet.
// Also @enonic-types/lib-explorer is not available on npm yet, which also prevents tests from running on github.
// test.dependsOn npmTest

task cleanCoverage(type:Delete) {
	delete 'coverage'
}
clean.dependsOn cleanCoverage

tasks.register('npmBuild', NpmTask) {
	args = [
		'run',
		'build'
	]
	dependsOn npmInstall
	environment = [
		'FORCE_COLOR': 'true',
		'LOG_LEVEL_FROM_GRADLE': gradle.startParameter.logLevel.toString(),
		'NODE_ENV': project.hasProperty('dev') || project.hasProperty('development') ? 'development' : 'production'
	]
	inputs.dir 'src/main/resources'
	outputs.dir 'build/resources/main' // processResources will delete the directory if this is not present
}
jar.dependsOn npmBuild
javadoc.dependsOn npmBuild

processResources {
	exclude '**/.gitkeep'

	// We want these:
	// * collectors.json
	// * documentTypes.json
	// But not these:
	exclude 'tsconfig.json'
	exclude 'assets/tsconfig.json'

	// Let tsup/vite handle these (rather than gradle)
	exclude '**/*.css'
	exclude '**/*.es'
	exclude '**/*.js'
	exclude '**/*.jsx'
	exclude '**/*.less'
	exclude '**/*.sass'
	exclude '**/*.scss'
	exclude '**/*.styl'
	exclude '**/*.ts'
	exclude '**/*.tsx'
}

tasks.register('compressAssets', NpmTask) {
	dependsOn npmBuild
	dependsOn processResources
	args = ['run', 'compress:assets']
	environment = [
		'FORCE_COLOR': 'true',
	]
	inputs.dir 'build/resources/main/assets'
	outputs.dir 'build/resources/main/assets'
}
// TODO: Use if switch to lib-asset
// jar.dependsOn compressAssets
