{
	"include": [
		"./src/main/resources/static/**/*.ts",
		"./src/main/resources/static/**/*.tsx",
	],
  "compilerOptions": {
		"jsx": "react-jsx",
		"lib": [
			"dom"
		],

		// Default: The longest common path of all non-declaration input files.
		//
		// If composite is set, the default is instead the directory containing
		// the tsconfig.json file.
		//
		// When TypeScript compiles files, it keeps the same directory structure
		// in the output directory as exists in the input directory.
		//
		// Importantly, rootDir does not affect which files become part of the
		// compilation. It has no interaction with the include, exclude, or
		// files tsconfig.json settings.
		//
		// Note that TypeScript will never write an output file to a directory
		// outside of outDir, and will never skip emitting a file. For this
		// reason, rootDir also enforces that all files which need to be emitted
		// are underneath the rootDir path.
		"rootDir": ".",

		// Using rootDirs, you can inform the compiler that there are many
		// “virtual” directories acting as a single root. This allows the
		// compiler to resolve relative module imports within these “virtual”
		// directories, as if they were merged in to one directory.
		//
		// This does not affect how TypeScript emits JavaScript, it only
		// emulates the assumption that they will be able to work via those
		// relative paths at runtime.
		//
		// rootDirs can be used to provide a separate “type layer” to files that
		// are not TypeScript or JavaScript by providing a home for generated
		// .d.ts files in another folder. This technique is useful for bundled
		// applications where you use import of files that aren’t necessarily
		// code.
		"rootDirs": [
			"./src/main/resources/static",
		],

		"skipLibCheck": true,
	},
}
