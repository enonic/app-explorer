{
	"compilerOptions": {
		"allowJs": true,
		"baseUrl": ".",
		"checkJs": false,
		"declaration": false,
		"declarationMap": false,
		"esModuleInterop": true,
		"forceConsistentCasingInFileNames": true,
		"inlineSourceMap": false,
		"inlineSources": false,
		"module": "ES2022",
		"moduleResolution": "node",
		"noEmit": true,
		"noImplicitAny": false,
		"noUnusedLocals": false, // Annoying while writing tests
		"noUnusedParameters": false,
		"paths": {
			// There is no @enonic-types/lib-explorer yet, so these are workarounds
			"@enonic-types/lib-explorer": ["../symlinks/lib-explorer/src/main/resources/lib/explorer/types/index.d"],
			"@enonic-types/lib-explorer/*": ["../symlinks/lib-explorer/src/main/resources/lib/explorer/types/*"],

			// lib-explorer is an external, but we still want the code editor to resolve types
			"/lib/explorer/*": ["../symlinks/lib-explorer/src/main/resources/lib/explorer/*"],

			"/lib/xp/*": ["../node_modules/@enonic-types/lib-*"],
		},
		"rootDir": "..",
		"rootDirs": [
			"../src/main/resources",
			// "../node_modules"
		],
		"skipLibCheck": true,
		"sourceMap": true, // Needed to get correct Uncovered Line numbers
		"strict": false,
		"strictFunctionTypes": false,
		"strictNullChecks": false,
		"target": "ES2022", // Recommended for Node 18 (tests fail with ES5)
		"types": [
			"@enonic-types/global",
			"jest", // This only works for test files in this folder
			"node", // console
		],
	},

	// Specifies an array of filenames or patterns to include in the program.
	// These filenames are resolved relative to the directory containing the
	// tsconfig.json file.
	"include": [
		"../../src/main/resources/**/*.test.ts",
		"../../src/main/resources/**/*.test.tsx",
		"./**/*.test.ts",
		"./**/*.test.tsx",
	],

	// Specifies an array of filenames or patterns that should be skipped when
	// resolving include.
	// Important: exclude only changes which files are included as a result of
	// the include setting. A file specified by exclude can still become part of
	// your codebase due to an import statement in your code, a types inclusion,
	// a /// <reference directive, or being specified in the files list.
	// It is not a mechanism that prevents a file from being included in the
	// codebase - it simply changes what the include setting finds.
	"exclude": [
		"../../src/main/resources/**/*.d.ts",
		"../../src/main/resources/**/*.d.tsx",
		"**/*.d.ts",
		"**/*.d.tsx",
	]
}
